syntax = "proto3";

option csharp_namespace = "RaceServer";

package race;

service GameService {
	rpc RoomStream (RoomStreamRequest) returns (stream RoomStreamResponse);
	rpc JoinRoom (JoinRoomRequest) returns (JoinRoomResponse);
	rpc LeaveRoom (LeaveRoomRequest) returns (LeaveRoomResponse);
	rpc PlayerReady (PlayerReadyRequest) returns (PlayerReadyResponse);
	rpc StartMatch (StartMatchRequest) returns (StartMatchResponse);
	rpc UpdateSeeds (UpdateSeedsRequest) returns (UpdateSeedsResponse);
	rpc EndGame (EndGameRequest) returns (EndGameResponse);
	rpc EndMatch (EndMatchRequest) returns (EndMatchResponse);
	rpc TogglePicks (TogglePicksRequest) returns (TogglePicksResponse);
	rpc SendSeed (SendSeedRequest) returns (SendSeedResponse);
}



enum Role {
	PLAYER = 0;
	SPECTATOR = 1;
}

enum MatchStatus {
	MATCH_WAITING = 0;
	MATCH_IN_PROGRESS = 1;
	MATCH_PAUSED = 2;
	MATCH_HIGHER_WIN = 3;
	MATCH_LOWER_WIN = 4;
	MATCH_DRAW = 5;
	MATCH_COMPLETED = 6;
	MATCH_CANCELLED = 7;
}

enum SeedStatus {
	AVAILABLE = 0;
	UNAVAILABLE = 1;
	PICKED = 2;
	BANNED = 3;
}

enum GameStatus {
	GAME_WAITING = 0;
	GAME_IN_PROGRESS = 1;
	GAME_PAUSED = 2;
	GAME_HIGHER_WIN_TIME = 3;
	GAME_HIGHER_WIN_FF = 4;
	GAME_LOWER_WIN_TIME = 5;
	GAME_LOWER_WIN_FF = 6;
	GAME_DRAW_TIME = 7;
	GAME_DRAW_VOTE = 8;
	GAME_COMPLETED = 9;
	GAME_CANCELLED = 10;
}

enum Category {
	ANY_VANILLA = 0;
}

message RoomUser {
	string name = 1;
	Role role = 2;
	bool host = 3;
	bool ready = 4;
	int32 seed = 5;
	int32 thread_count = 6;
	bool generator = 7;
}

message MatchState {
	MatchStatus status = 1;
	repeated RoomUser players = 2;
	int32 finishers = 3;
	int32 best_of = 4;
	int32 current_game = 5;
	int32 advantage_h = 6;
	int32 advantage_l = 7;
	int32 score_h = 8;
	int32 score_l = 9;
	repeated GameReport game_reports = 10;
	Category category = 11;
	repeated SeedType seed_types = 12;
	bool picks_on = 13;
	bool bans_on = 14;
	bool unbans_on = 15;
}

message GameReport {
	string time = 1;
	double percentage = 2;
	int32 surface_type = 3;
	int32 surface_picker = 4;
	int32 surface_index = 5;
	int32 cave_type = 6;
	int32 cave_picker = 7;
	int32 cave_index = 8;
	int32 world_seed = 9;
	int32 rng_seed = 10;
	GameStatus game_status = 11;
}

message SeedType {
	bool is_surface = 1;
	int32 type = 2;
	SeedStatus status = 3;
}



message RoomStreamRequest {
	string name = 1;
	Role role = 2;
	bool host = 3;
	int32 thread_count = 4;
}

message RoomStreamResponse {
	oneof message {
		JoinRoomNotification join_room_notification = 1;
		LeaveRoomNotification leave_room_notification = 2;
		PlayerReadyNotification player_ready_notification = 3;
		StartMatchNotification start_match_notification = 4;
		UpdateSeedsNotification update_seeds_notification = 5;
		EndGameNotification end_game_notification = 6;
		EndMatchNotification end_match_notification = 7;
		TogglePicksNotification toggle_picks_notification = 8;
		SendSeedNotification send_seed_notification = 9;
	}
}



message JoinRoomRequest {
	string name = 1;
	Role role = 2;
}

message JoinRoomResponse {
	RoomUser myself = 1;
}

message JoinRoomNotification {
	repeated RoomUser users = 1;
	bool all_ready = 2;
}



message LeaveRoomRequest {
	string name = 1;
}

message LeaveRoomResponse {
	bool success = 1;
}

message LeaveRoomNotification {
	repeated RoomUser users = 2;
	bool all_ready = 3;
}



message PlayerReadyRequest {
	string name = 1;
}

message PlayerReadyResponse {
	bool ready = 1;
}

message PlayerReadyNotification {
	repeated RoomUser users = 1;
	bool all_ready = 2;
}



message StartMatchRequest {
	string name = 1;
}

message StartMatchResponse {
	
}

message StartMatchNotification {
	MatchState match_state = 1;
}



message UpdateSeedsRequest {
	
}

message UpdateSeedsResponse {
	
}

message UpdateSeedsNotification {
	
}



message EndGameRequest {
	
}

message EndGameResponse {
	
}

message EndGameNotification {
	
}



message EndMatchRequest {
	
}

message EndMatchResponse {
	
}

message EndMatchNotification {
	
}



message TogglePicksRequest {
	string name = 1;
}

message TogglePicksResponse {
	bool success = 1;
}

message TogglePicksNotification {
	MatchState match_state = 1;
}



message SendSeedRequest {
	string name = 1;
	int32 world_seed = 2;
	int32 surface_index = 3;
	int32 cave_index = 4;
}

message SendSeedResponse {
	bool success = 1;
}

message SendSeedNotification {
	MatchState match_state = 1;
}